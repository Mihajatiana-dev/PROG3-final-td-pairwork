/*
 * Football championship API
 * Football
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddGoal;
import java.time.LocalDate;
import org.openapitools.client.model.Match;
import org.openapitools.client.model.MatchStatus;
import org.openapitools.client.model.UpdateMatchStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MatchApi
 */
@Disabled
public class MatchApiTest {

    private final MatchApi api = new MatchApi();

    /**
     * Create all matches for a specific season including all clubs
     *
     * Only season with status STARTED can compute matches, in case season status is either NOT_STARTED or FINISHED, must return 400 BAD_REQUEST. In case provided season matches already generated, then must return 400 BAD_REQUEST response. Otherwise, create two matches for each club against other, one &#39;HOME&#39; match and one &#39;AWAY&#39; match. Look at the instructions inside the context to have more explanation and examples. Also, in case the provided &#x60;seasonYear&#x60; does not exist, returns 404 NOT_FOUND response. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matchMakerSeasonYearPostTest() throws ApiException {
        LocalDate seasonYear = null;
        List<Match> response = api.matchMakerSeasonYearPost(seasonYear);
        // TODO: test validations
    }

    /**
     * Add goals by player to a specific match
     *
     * Only match with status STARTED can be added goals. If NOT_STARTED or FINISHED status, must return 400 BAD_REQUEST. After each request, the scorer player statistics must be updated, that means, after a goal is scored, response return by GET /players/{id}/statistics/{seasonYear} should be updated. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matchesIdGoalsPostTest() throws ApiException {
        String id = null;
        List<AddGoal> addGoal = null;
        Match response = api.matchesIdGoalsPost(id, addGoal);
        // TODO: test validations
    }

    /**
     * Change a specific match status
     *
     * Following order is to be accepted : NOT_STARTED &gt; STARTED &gt; FINISHED. In case you change status order, a 400 BAD_REQUEST response must be return. When match is set to status FINISHED, club rankings and statistics must be updated,  that means after a match is finished, response return by GET /clubs/statistics/{seasonYear} should be updated. For reminder, this is the rules about points obtained after each match according to its result :  1. In case of victory, the winner obtains 3 points. 2. In cas of draw, each club of the match obtains 1 point. 3. In case of defeat, the loser obtains 0 point. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matchesIdStatusPutTest() throws ApiException {
        String id = null;
        UpdateMatchStatus updateMatchStatus = null;
        Match response = api.matchesIdStatusPut(id, updateMatchStatus);
        // TODO: test validations
    }

    /**
     * Get all matches for a specific season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matchesSeasonYearGetTest() throws ApiException {
        LocalDate seasonYear = null;
        MatchStatus matchStatus = null;
        String clubPlayingName = null;
        LocalDate matchAfter = null;
        LocalDate matchBeforeOrEquals = null;
        List<Match> response = api.matchesSeasonYearGet(seasonYear, matchStatus, clubPlayingName, matchAfter, matchBeforeOrEquals);
        // TODO: test validations
    }

}
