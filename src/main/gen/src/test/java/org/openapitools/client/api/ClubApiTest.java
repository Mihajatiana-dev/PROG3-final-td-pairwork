/*
 * Football championship API
 * Football
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Club;
import org.openapitools.client.model.ClubStatistics;
import java.time.LocalDate;
import org.openapitools.client.model.Player;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClubApi
 */
@Disabled
public class ClubApiTest {

    private final ClubApi api = new ClubApi();

    /**
     * Get actual players of the specific club
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clubsIdPlayersGetTest() throws ApiException {
        String id = null;
        List<Player> response = api.clubsIdPlayersGet(id);
        // TODO: test validations
    }

    /**
     * Add new players or existing players to the specific club
     *
     * Provided players inside the requestBody create the players if do not exist,  or attached them to the club, if the players are not attached to a club. In case, one of existing players is still attached to a club, API must return 400 BAD_REQUEST. Also, in case players exist and identified by its ID, player provided values do not update existing player attributes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clubsIdPlayersPostTest() throws ApiException {
        String id = null;
        List<Player> player = null;
        List<Player> response = api.clubsIdPlayersPost(id, player);
        // TODO: test validations
    }

    /**
     * Change players of the specific club
     *
     * Provided players inside the requestBody erase the existing players inside the club. In case player is detached from club, it is still possible to retrieve his individual statistics  and collective statistics do not change.  For example, the player has 10 goals for the season, even if he is not part of the club anymore,  the club statistics do not change (goals scored). Finally, he must not be inside the list of players can make actions anymore for the remaining matches, if the season is not yet finished.         In case, one of existing players is still attached to a club, API must return 400 BAD_REQUEST. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clubsIdPlayersPutTest() throws ApiException {
        String id = null;
        List<Player> player = null;
        List<Player> response = api.clubsIdPlayersPut(id, player);
        // TODO: test validations
    }

    /**
     * Get all clubs statistics for a specific season year
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clubsStatisticsSeasonYearGetTest() throws ApiException {
        LocalDate seasonYear = null;
        Boolean hasToBeClassified = null;
        List<ClubStatistics> response = api.clubsStatisticsSeasonYearGet(seasonYear, hasToBeClassified);
        // TODO: test validations
    }

    /**
     * Create new clubs or update if already exist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateClubsTest() throws ApiException {
        List<Club> club = null;
        List<Club> response = api.createOrUpdateClubs(club);
        // TODO: test validations
    }

    /**
     * Get clubs of the championship
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClubsTest() throws ApiException {
        List<Club> response = api.getClubs();
        // TODO: test validations
    }

}
