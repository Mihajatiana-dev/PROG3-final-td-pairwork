/*
 * Football championship API
 * Football
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Club;
import org.openapitools.client.model.ClubStatistics;
import java.time.LocalDate;
import org.openapitools.client.model.Player;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClubApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClubApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClubApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clubsIdPlayersGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players of the club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsIdPlayersGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clubs/{id}/players"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clubsIdPlayersGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clubsIdPlayersGet(Async)");
        }

        return clubsIdPlayersGetCall(id, _callback);

    }

    /**
     * Get actual players of the specific club
     * 
     * @param id  (required)
     * @return List&lt;Player&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players of the club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Player> clubsIdPlayersGet(String id) throws ApiException {
        ApiResponse<List<Player>> localVarResp = clubsIdPlayersGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get actual players of the specific club
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Player&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players of the club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Player>> clubsIdPlayersGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = clubsIdPlayersGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get actual players of the specific club (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players of the club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsIdPlayersGetAsync(String id, final ApiCallback<List<Player>> _callback) throws ApiException {

        okhttp3.Call localVarCall = clubsIdPlayersGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clubsIdPlayersPost
     * @param id  (required)
     * @param player  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players of the specific club, including old players and new ones </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request when players still attached to another club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsIdPlayersPostCall(String id, List<Player> player, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = player;

        // create path and map variables
        String localVarPath = "/clubs/{id}/players"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clubsIdPlayersPostValidateBeforeCall(String id, List<Player> player, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clubsIdPlayersPost(Async)");
        }

        return clubsIdPlayersPostCall(id, player, _callback);

    }

    /**
     * Add new players or existing players to the specific club
     * Provided players inside the requestBody create the players if do not exist,  or attached them to the club, if the players are not attached to a club. In case, one of existing players is still attached to a club, API must return 400 BAD_REQUEST. Also, in case players exist and identified by its ID, player provided values do not update existing player attributes. 
     * @param id  (required)
     * @param player  (optional)
     * @return List&lt;Player&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players of the specific club, including old players and new ones </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request when players still attached to another club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Player> clubsIdPlayersPost(String id, List<Player> player) throws ApiException {
        ApiResponse<List<Player>> localVarResp = clubsIdPlayersPostWithHttpInfo(id, player);
        return localVarResp.getData();
    }

    /**
     * Add new players or existing players to the specific club
     * Provided players inside the requestBody create the players if do not exist,  or attached them to the club, if the players are not attached to a club. In case, one of existing players is still attached to a club, API must return 400 BAD_REQUEST. Also, in case players exist and identified by its ID, player provided values do not update existing player attributes. 
     * @param id  (required)
     * @param player  (optional)
     * @return ApiResponse&lt;List&lt;Player&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players of the specific club, including old players and new ones </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request when players still attached to another club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Player>> clubsIdPlayersPostWithHttpInfo(String id, List<Player> player) throws ApiException {
        okhttp3.Call localVarCall = clubsIdPlayersPostValidateBeforeCall(id, player, null);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new players or existing players to the specific club (asynchronously)
     * Provided players inside the requestBody create the players if do not exist,  or attached them to the club, if the players are not attached to a club. In case, one of existing players is still attached to a club, API must return 400 BAD_REQUEST. Also, in case players exist and identified by its ID, player provided values do not update existing player attributes. 
     * @param id  (required)
     * @param player  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players of the specific club, including old players and new ones </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request when players still attached to another club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsIdPlayersPostAsync(String id, List<Player> player, final ApiCallback<List<Player>> _callback) throws ApiException {

        okhttp3.Call localVarCall = clubsIdPlayersPostValidateBeforeCall(id, player, _callback);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clubsIdPlayersPut
     * @param id  (required)
     * @param player  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actual players of the specific club </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request when players still attached to another club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsIdPlayersPutCall(String id, List<Player> player, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = player;

        // create path and map variables
        String localVarPath = "/clubs/{id}/players"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clubsIdPlayersPutValidateBeforeCall(String id, List<Player> player, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clubsIdPlayersPut(Async)");
        }

        return clubsIdPlayersPutCall(id, player, _callback);

    }

    /**
     * Change players of the specific club
     * Provided players inside the requestBody erase the existing players inside the club. In case player is detached from club, it is still possible to retrieve his individual statistics  and collective statistics do not change.  For example, the player has 10 goals for the season, even if he is not part of the club anymore,  the club statistics do not change (goals scored). Finally, he must not be inside the list of players can make actions anymore for the remaining matches, if the season is not yet finished.         In case, one of existing players is still attached to a club, API must return 400 BAD_REQUEST. 
     * @param id  (required)
     * @param player  (optional)
     * @return List&lt;Player&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actual players of the specific club </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request when players still attached to another club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Player> clubsIdPlayersPut(String id, List<Player> player) throws ApiException {
        ApiResponse<List<Player>> localVarResp = clubsIdPlayersPutWithHttpInfo(id, player);
        return localVarResp.getData();
    }

    /**
     * Change players of the specific club
     * Provided players inside the requestBody erase the existing players inside the club. In case player is detached from club, it is still possible to retrieve his individual statistics  and collective statistics do not change.  For example, the player has 10 goals for the season, even if he is not part of the club anymore,  the club statistics do not change (goals scored). Finally, he must not be inside the list of players can make actions anymore for the remaining matches, if the season is not yet finished.         In case, one of existing players is still attached to a club, API must return 400 BAD_REQUEST. 
     * @param id  (required)
     * @param player  (optional)
     * @return ApiResponse&lt;List&lt;Player&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actual players of the specific club </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request when players still attached to another club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Player>> clubsIdPlayersPutWithHttpInfo(String id, List<Player> player) throws ApiException {
        okhttp3.Call localVarCall = clubsIdPlayersPutValidateBeforeCall(id, player, null);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change players of the specific club (asynchronously)
     * Provided players inside the requestBody erase the existing players inside the club. In case player is detached from club, it is still possible to retrieve his individual statistics  and collective statistics do not change.  For example, the player has 10 goals for the season, even if he is not part of the club anymore,  the club statistics do not change (goals scored). Finally, he must not be inside the list of players can make actions anymore for the remaining matches, if the season is not yet finished.         In case, one of existing players is still attached to a club, API must return 400 BAD_REQUEST. 
     * @param id  (required)
     * @param player  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actual players of the specific club </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request when players still attached to another club </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsIdPlayersPutAsync(String id, List<Player> player, final ApiCallback<List<Player>> _callback) throws ApiException {

        okhttp3.Call localVarCall = clubsIdPlayersPutValidateBeforeCall(id, player, _callback);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clubsStatisticsSeasonYearGet
     * @param seasonYear  (required)
     * @param hasToBeClassified Default value is false, and if so, return list of statistics ordered by club name ASC. If provided value is true, return list of statistics ordered by rankings. Ranking is computed respectively according to the following orders of factors: 1. Ranking points : club with most ranking points goes on top 2. Difference goals : if some clubs have same ranking points, club with most difference goals goes on top 3. Clean sheets number : if some clubs have same both ranking points and difference goals, club with most clean sheets goes on top  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All club statistics for the specific season </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsStatisticsSeasonYearGetCall(LocalDate seasonYear, Boolean hasToBeClassified, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clubs/statistics/{seasonYear}"
            .replace("{" + "seasonYear" + "}", localVarApiClient.escapeString(seasonYear.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hasToBeClassified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasToBeClassified", hasToBeClassified));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clubsStatisticsSeasonYearGetValidateBeforeCall(LocalDate seasonYear, Boolean hasToBeClassified, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling clubsStatisticsSeasonYearGet(Async)");
        }

        return clubsStatisticsSeasonYearGetCall(seasonYear, hasToBeClassified, _callback);

    }

    /**
     * Get all clubs statistics for a specific season year
     * 
     * @param seasonYear  (required)
     * @param hasToBeClassified Default value is false, and if so, return list of statistics ordered by club name ASC. If provided value is true, return list of statistics ordered by rankings. Ranking is computed respectively according to the following orders of factors: 1. Ranking points : club with most ranking points goes on top 2. Difference goals : if some clubs have same ranking points, club with most difference goals goes on top 3. Clean sheets number : if some clubs have same both ranking points and difference goals, club with most clean sheets goes on top  (optional)
     * @return List&lt;ClubStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All club statistics for the specific season </td><td>  -  </td></tr>
     </table>
     */
    public List<ClubStatistics> clubsStatisticsSeasonYearGet(LocalDate seasonYear, Boolean hasToBeClassified) throws ApiException {
        ApiResponse<List<ClubStatistics>> localVarResp = clubsStatisticsSeasonYearGetWithHttpInfo(seasonYear, hasToBeClassified);
        return localVarResp.getData();
    }

    /**
     * Get all clubs statistics for a specific season year
     * 
     * @param seasonYear  (required)
     * @param hasToBeClassified Default value is false, and if so, return list of statistics ordered by club name ASC. If provided value is true, return list of statistics ordered by rankings. Ranking is computed respectively according to the following orders of factors: 1. Ranking points : club with most ranking points goes on top 2. Difference goals : if some clubs have same ranking points, club with most difference goals goes on top 3. Clean sheets number : if some clubs have same both ranking points and difference goals, club with most clean sheets goes on top  (optional)
     * @return ApiResponse&lt;List&lt;ClubStatistics&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All club statistics for the specific season </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClubStatistics>> clubsStatisticsSeasonYearGetWithHttpInfo(LocalDate seasonYear, Boolean hasToBeClassified) throws ApiException {
        okhttp3.Call localVarCall = clubsStatisticsSeasonYearGetValidateBeforeCall(seasonYear, hasToBeClassified, null);
        Type localVarReturnType = new TypeToken<List<ClubStatistics>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all clubs statistics for a specific season year (asynchronously)
     * 
     * @param seasonYear  (required)
     * @param hasToBeClassified Default value is false, and if so, return list of statistics ordered by club name ASC. If provided value is true, return list of statistics ordered by rankings. Ranking is computed respectively according to the following orders of factors: 1. Ranking points : club with most ranking points goes on top 2. Difference goals : if some clubs have same ranking points, club with most difference goals goes on top 3. Clean sheets number : if some clubs have same both ranking points and difference goals, club with most clean sheets goes on top  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All club statistics for the specific season </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsStatisticsSeasonYearGetAsync(LocalDate seasonYear, Boolean hasToBeClassified, final ApiCallback<List<ClubStatistics>> _callback) throws ApiException {

        okhttp3.Call localVarCall = clubsStatisticsSeasonYearGetValidateBeforeCall(seasonYear, hasToBeClassified, _callback);
        Type localVarReturnType = new TypeToken<List<ClubStatistics>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrUpdateClubs
     * @param club  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created or updated clubs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdateClubsCall(List<Club> club, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = club;

        // create path and map variables
        String localVarPath = "/clubs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateClubsValidateBeforeCall(List<Club> club, final ApiCallback _callback) throws ApiException {
        return createOrUpdateClubsCall(club, _callback);

    }

    /**
     * Create new clubs or update if already exist
     * 
     * @param club  (optional)
     * @return List&lt;Club&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created or updated clubs </td><td>  -  </td></tr>
     </table>
     */
    public List<Club> createOrUpdateClubs(List<Club> club) throws ApiException {
        ApiResponse<List<Club>> localVarResp = createOrUpdateClubsWithHttpInfo(club);
        return localVarResp.getData();
    }

    /**
     * Create new clubs or update if already exist
     * 
     * @param club  (optional)
     * @return ApiResponse&lt;List&lt;Club&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created or updated clubs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Club>> createOrUpdateClubsWithHttpInfo(List<Club> club) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateClubsValidateBeforeCall(club, null);
        Type localVarReturnType = new TypeToken<List<Club>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new clubs or update if already exist (asynchronously)
     * 
     * @param club  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created or updated clubs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdateClubsAsync(List<Club> club, final ApiCallback<List<Club>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateClubsValidateBeforeCall(club, _callback);
        Type localVarReturnType = new TypeToken<List<Club>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClubs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the clubs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClubsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clubs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClubsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getClubsCall(_callback);

    }

    /**
     * Get clubs of the championship
     * 
     * @return List&lt;Club&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the clubs </td><td>  -  </td></tr>
     </table>
     */
    public List<Club> getClubs() throws ApiException {
        ApiResponse<List<Club>> localVarResp = getClubsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get clubs of the championship
     * 
     * @return ApiResponse&lt;List&lt;Club&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the clubs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Club>> getClubsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getClubsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Club>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get clubs of the championship (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the clubs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClubsAsync(final ApiCallback<List<Club>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClubsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Club>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
