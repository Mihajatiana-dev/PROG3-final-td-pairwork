/*
 * Football championship API
 * Football
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MatchClub;
import org.openapitools.client.model.MatchStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Match
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-29T01:12:43.252300458+03:00[Indian/Antananarivo]", comments = "Generator version: 7.7.0")
public class Match {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CLUB_PLAYING_HOME = "clubPlayingHome";
  @SerializedName(SERIALIZED_NAME_CLUB_PLAYING_HOME)
  private MatchClub clubPlayingHome;

  public static final String SERIALIZED_NAME_CLUB_PLAYING_AWAY = "clubPlayingAway";
  @SerializedName(SERIALIZED_NAME_CLUB_PLAYING_AWAY)
  private MatchClub clubPlayingAway;

  public static final String SERIALIZED_NAME_STADIUM = "stadium";
  @SerializedName(SERIALIZED_NAME_STADIUM)
  private String stadium;

  public static final String SERIALIZED_NAME_MATCH_DATETIME = "matchDatetime";
  @SerializedName(SERIALIZED_NAME_MATCH_DATETIME)
  private OffsetDateTime matchDatetime;

  public static final String SERIALIZED_NAME_ACTUAL_STATUS = "actualStatus";
  @SerializedName(SERIALIZED_NAME_ACTUAL_STATUS)
  private MatchStatus actualStatus;

  public Match() {
  }

  public Match id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Match clubPlayingHome(MatchClub clubPlayingHome) {
    this.clubPlayingHome = clubPlayingHome;
    return this;
  }

  /**
   * Get clubPlayingHome
   * @return clubPlayingHome
   */
  @javax.annotation.Nullable
  public MatchClub getClubPlayingHome() {
    return clubPlayingHome;
  }

  public void setClubPlayingHome(MatchClub clubPlayingHome) {
    this.clubPlayingHome = clubPlayingHome;
  }


  public Match clubPlayingAway(MatchClub clubPlayingAway) {
    this.clubPlayingAway = clubPlayingAway;
    return this;
  }

  /**
   * Get clubPlayingAway
   * @return clubPlayingAway
   */
  @javax.annotation.Nullable
  public MatchClub getClubPlayingAway() {
    return clubPlayingAway;
  }

  public void setClubPlayingAway(MatchClub clubPlayingAway) {
    this.clubPlayingAway = clubPlayingAway;
  }


  public Match stadium(String stadium) {
    this.stadium = stadium;
    return this;
  }

  /**
   * Get stadium
   * @return stadium
   */
  @javax.annotation.Nullable
  public String getStadium() {
    return stadium;
  }

  public void setStadium(String stadium) {
    this.stadium = stadium;
  }


  public Match matchDatetime(OffsetDateTime matchDatetime) {
    this.matchDatetime = matchDatetime;
    return this;
  }

  /**
   * Get matchDatetime
   * @return matchDatetime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMatchDatetime() {
    return matchDatetime;
  }

  public void setMatchDatetime(OffsetDateTime matchDatetime) {
    this.matchDatetime = matchDatetime;
  }


  public Match actualStatus(MatchStatus actualStatus) {
    this.actualStatus = actualStatus;
    return this;
  }

  /**
   * Get actualStatus
   * @return actualStatus
   */
  @javax.annotation.Nullable
  public MatchStatus getActualStatus() {
    return actualStatus;
  }

  public void setActualStatus(MatchStatus actualStatus) {
    this.actualStatus = actualStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Match match = (Match) o;
    return Objects.equals(this.id, match.id) &&
        Objects.equals(this.clubPlayingHome, match.clubPlayingHome) &&
        Objects.equals(this.clubPlayingAway, match.clubPlayingAway) &&
        Objects.equals(this.stadium, match.stadium) &&
        Objects.equals(this.matchDatetime, match.matchDatetime) &&
        Objects.equals(this.actualStatus, match.actualStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, clubPlayingHome, clubPlayingAway, stadium, matchDatetime, actualStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Match {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    clubPlayingHome: ").append(toIndentedString(clubPlayingHome)).append("\n");
    sb.append("    clubPlayingAway: ").append(toIndentedString(clubPlayingAway)).append("\n");
    sb.append("    stadium: ").append(toIndentedString(stadium)).append("\n");
    sb.append("    matchDatetime: ").append(toIndentedString(matchDatetime)).append("\n");
    sb.append("    actualStatus: ").append(toIndentedString(actualStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("clubPlayingHome");
    openapiFields.add("clubPlayingAway");
    openapiFields.add("stadium");
    openapiFields.add("matchDatetime");
    openapiFields.add("actualStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Match
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Match.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Match is not found in the empty JSON string", Match.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Match.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Match` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `clubPlayingHome`
      if (jsonObj.get("clubPlayingHome") != null && !jsonObj.get("clubPlayingHome").isJsonNull()) {
        MatchClub.validateJsonElement(jsonObj.get("clubPlayingHome"));
      }
      // validate the optional field `clubPlayingAway`
      if (jsonObj.get("clubPlayingAway") != null && !jsonObj.get("clubPlayingAway").isJsonNull()) {
        MatchClub.validateJsonElement(jsonObj.get("clubPlayingAway"));
      }
      if ((jsonObj.get("stadium") != null && !jsonObj.get("stadium").isJsonNull()) && !jsonObj.get("stadium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stadium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stadium").toString()));
      }
      // validate the optional field `actualStatus`
      if (jsonObj.get("actualStatus") != null && !jsonObj.get("actualStatus").isJsonNull()) {
        MatchStatus.validateJsonElement(jsonObj.get("actualStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Match.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Match' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Match> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Match.class));

       return (TypeAdapter<T>) new TypeAdapter<Match>() {
           @Override
           public void write(JsonWriter out, Match value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Match read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Match given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Match
   * @throws IOException if the JSON string is invalid with respect to Match
   */
  public static Match fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Match.class);
  }

  /**
   * Convert an instance of Match to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

