/*
 * Football championship API
 * Football
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Scorer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MatchClub
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-29T01:12:43.252300458+03:00[Indian/Antananarivo]", comments = "Generator version: 7.7.0")
public class MatchClub {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ACRONYM = "acronym";
  @SerializedName(SERIALIZED_NAME_ACRONYM)
  private String acronym;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_SCORERS = "scorers";
  @SerializedName(SERIALIZED_NAME_SCORERS)
  private List<Scorer> scorers = new ArrayList<>();

  public MatchClub() {
  }

  public MatchClub id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Club identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MatchClub name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MatchClub acronym(String acronym) {
    this.acronym = acronym;
    return this;
  }

  /**
   * Three letters describing the club (not-unique)
   * @return acronym
   */
  @javax.annotation.Nullable
  public String getAcronym() {
    return acronym;
  }

  public void setAcronym(String acronym) {
    this.acronym = acronym;
  }


  public MatchClub score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * For example, if the match actual score is &#39;Real Madrid 2 - 3 FC Barcelona&#39;,  That means Real Madrid has scored 2 two goals and plays at home and FC Barcelona has scored 3 goals and plays away, The &#x60;home.value&#x60; would be 2 and the &#x60;away.value&#39; 3. 
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public MatchClub scorers(List<Scorer> scorers) {
    this.scorers = scorers;
    return this;
  }

  public MatchClub addScorersItem(Scorer scorersItem) {
    if (this.scorers == null) {
      this.scorers = new ArrayList<>();
    }
    this.scorers.add(scorersItem);
    return this;
  }

  /**
   * Get scorers
   * @return scorers
   */
  @javax.annotation.Nullable
  public List<Scorer> getScorers() {
    return scorers;
  }

  public void setScorers(List<Scorer> scorers) {
    this.scorers = scorers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchClub matchClub = (MatchClub) o;
    return Objects.equals(this.id, matchClub.id) &&
        Objects.equals(this.name, matchClub.name) &&
        Objects.equals(this.acronym, matchClub.acronym) &&
        Objects.equals(this.score, matchClub.score) &&
        Objects.equals(this.scorers, matchClub.scorers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, acronym, score, scorers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchClub {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    acronym: ").append(toIndentedString(acronym)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    scorers: ").append(toIndentedString(scorers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("acronym");
    openapiFields.add("score");
    openapiFields.add("scorers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchClub
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchClub.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchClub is not found in the empty JSON string", MatchClub.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchClub.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchClub` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("acronym") != null && !jsonObj.get("acronym").isJsonNull()) && !jsonObj.get("acronym").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acronym` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acronym").toString()));
      }
      if (jsonObj.get("scorers") != null && !jsonObj.get("scorers").isJsonNull()) {
        JsonArray jsonArrayscorers = jsonObj.getAsJsonArray("scorers");
        if (jsonArrayscorers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scorers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scorers` to be an array in the JSON string but got `%s`", jsonObj.get("scorers").toString()));
          }

          // validate the optional field `scorers` (array)
          for (int i = 0; i < jsonArrayscorers.size(); i++) {
            Scorer.validateJsonElement(jsonArrayscorers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchClub.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchClub' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchClub> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchClub.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchClub>() {
           @Override
           public void write(JsonWriter out, MatchClub value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchClub read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchClub given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchClub
   * @throws IOException if the JSON string is invalid with respect to MatchClub
   */
  public static MatchClub fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchClub.class);
  }

  /**
   * Convert an instance of MatchClub to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

