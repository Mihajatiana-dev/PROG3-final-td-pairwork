/*
 * Football championship API
 * Football
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClubPlayer;
import java.time.LocalDate;
import org.openapitools.client.model.Player;
import org.openapitools.client.model.PlayerStatistics;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlayerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlayerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrUpdatePlayers
     * @param player  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created or updated players </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdatePlayersCall(List<Player> player, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = player;

        // create path and map variables
        String localVarPath = "/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdatePlayersValidateBeforeCall(List<Player> player, final ApiCallback _callback) throws ApiException {
        return createOrUpdatePlayersCall(player, _callback);

    }

    /**
     * Create or update players without attaching them into club
     * 
     * @param player  (optional)
     * @return List&lt;Player&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created or updated players </td><td>  -  </td></tr>
     </table>
     */
    public List<Player> createOrUpdatePlayers(List<Player> player) throws ApiException {
        ApiResponse<List<Player>> localVarResp = createOrUpdatePlayersWithHttpInfo(player);
        return localVarResp.getData();
    }

    /**
     * Create or update players without attaching them into club
     * 
     * @param player  (optional)
     * @return ApiResponse&lt;List&lt;Player&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created or updated players </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Player>> createOrUpdatePlayersWithHttpInfo(List<Player> player) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdatePlayersValidateBeforeCall(player, null);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update players without attaching them into club (asynchronously)
     * 
     * @param player  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created or updated players </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdatePlayersAsync(List<Player> player, final ApiCallback<List<Player>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdatePlayersValidateBeforeCall(player, _callback);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayers
     * @param name  (optional)
     * @param ageMinimum  (optional)
     * @param ageMaximum  (optional)
     * @param clubName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players with their clubs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayersCall(String name, Integer ageMinimum, Integer ageMaximum, String clubName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ageMinimum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ageMinimum", ageMinimum));
        }

        if (ageMaximum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ageMaximum", ageMaximum));
        }

        if (clubName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clubName", clubName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayersValidateBeforeCall(String name, Integer ageMinimum, Integer ageMaximum, String clubName, final ApiCallback _callback) throws ApiException {
        return getPlayersCall(name, ageMinimum, ageMaximum, clubName, _callback);

    }

    /**
     * Get list of players in the championship
     * 
     * @param name  (optional)
     * @param ageMinimum  (optional)
     * @param ageMaximum  (optional)
     * @param clubName  (optional)
     * @return List&lt;ClubPlayer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players with their clubs </td><td>  -  </td></tr>
     </table>
     */
    public List<ClubPlayer> getPlayers(String name, Integer ageMinimum, Integer ageMaximum, String clubName) throws ApiException {
        ApiResponse<List<ClubPlayer>> localVarResp = getPlayersWithHttpInfo(name, ageMinimum, ageMaximum, clubName);
        return localVarResp.getData();
    }

    /**
     * Get list of players in the championship
     * 
     * @param name  (optional)
     * @param ageMinimum  (optional)
     * @param ageMaximum  (optional)
     * @param clubName  (optional)
     * @return ApiResponse&lt;List&lt;ClubPlayer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players with their clubs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClubPlayer>> getPlayersWithHttpInfo(String name, Integer ageMinimum, Integer ageMaximum, String clubName) throws ApiException {
        okhttp3.Call localVarCall = getPlayersValidateBeforeCall(name, ageMinimum, ageMaximum, clubName, null);
        Type localVarReturnType = new TypeToken<List<ClubPlayer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of players in the championship (asynchronously)
     * 
     * @param name  (optional)
     * @param ageMinimum  (optional)
     * @param ageMaximum  (optional)
     * @param clubName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of players with their clubs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayersAsync(String name, Integer ageMinimum, Integer ageMaximum, String clubName, final ApiCallback<List<ClubPlayer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayersValidateBeforeCall(name, ageMinimum, ageMaximum, clubName, _callback);
        Type localVarReturnType = new TypeToken<List<ClubPlayer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatisticsOfPlayerById
     * @param id  (required)
     * @param seasonYear  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Player statistics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsOfPlayerByIdCall(String id, LocalDate seasonYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{id}/statistics/{seasonYear}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "seasonYear" + "}", localVarApiClient.escapeString(seasonYear.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticsOfPlayerByIdValidateBeforeCall(String id, LocalDate seasonYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStatisticsOfPlayerById(Async)");
        }

        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling getStatisticsOfPlayerById(Async)");
        }

        return getStatisticsOfPlayerByIdCall(id, seasonYear, _callback);

    }

    /**
     * Get statistics for a specific player
     * Important ! Note that own goals are not considered as goal inside goals scored. 
     * @param id  (required)
     * @param seasonYear  (required)
     * @return PlayerStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Player statistics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PlayerStatistics getStatisticsOfPlayerById(String id, LocalDate seasonYear) throws ApiException {
        ApiResponse<PlayerStatistics> localVarResp = getStatisticsOfPlayerByIdWithHttpInfo(id, seasonYear);
        return localVarResp.getData();
    }

    /**
     * Get statistics for a specific player
     * Important ! Note that own goals are not considered as goal inside goals scored. 
     * @param id  (required)
     * @param seasonYear  (required)
     * @return ApiResponse&lt;PlayerStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Player statistics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlayerStatistics> getStatisticsOfPlayerByIdWithHttpInfo(String id, LocalDate seasonYear) throws ApiException {
        okhttp3.Call localVarCall = getStatisticsOfPlayerByIdValidateBeforeCall(id, seasonYear, null);
        Type localVarReturnType = new TypeToken<PlayerStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get statistics for a specific player (asynchronously)
     * Important ! Note that own goals are not considered as goal inside goals scored. 
     * @param id  (required)
     * @param seasonYear  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Player statistics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsOfPlayerByIdAsync(String id, LocalDate seasonYear, final ApiCallback<PlayerStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticsOfPlayerByIdValidateBeforeCall(id, seasonYear, _callback);
        Type localVarReturnType = new TypeToken<PlayerStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
