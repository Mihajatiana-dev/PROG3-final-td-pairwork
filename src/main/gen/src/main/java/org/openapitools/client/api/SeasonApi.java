/*
 * Football championship API
 * Football
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateSeason;
import java.time.LocalDate;
import org.openapitools.client.model.Season;
import org.openapitools.client.model.UpdateSeasonStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SeasonApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SeasonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SeasonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSeasons
     * @param createSeason  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all seasons including new seasons created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSeasonsCall(List<CreateSeason> createSeason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSeason;

        // create path and map variables
        String localVarPath = "/seasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSeasonsValidateBeforeCall(List<CreateSeason> createSeason, final ApiCallback _callback) throws ApiException {
        return createSeasonsCall(createSeason, _callback);

    }

    /**
     * Create list of new seasons
     * Required request body without ID or status, default computed status is NOT_STARTED. 
     * @param createSeason  (optional)
     * @return List&lt;Season&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all seasons including new seasons created </td><td>  -  </td></tr>
     </table>
     */
    public List<Season> createSeasons(List<CreateSeason> createSeason) throws ApiException {
        ApiResponse<List<Season>> localVarResp = createSeasonsWithHttpInfo(createSeason);
        return localVarResp.getData();
    }

    /**
     * Create list of new seasons
     * Required request body without ID or status, default computed status is NOT_STARTED. 
     * @param createSeason  (optional)
     * @return ApiResponse&lt;List&lt;Season&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all seasons including new seasons created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Season>> createSeasonsWithHttpInfo(List<CreateSeason> createSeason) throws ApiException {
        okhttp3.Call localVarCall = createSeasonsValidateBeforeCall(createSeason, null);
        Type localVarReturnType = new TypeToken<List<Season>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create list of new seasons (asynchronously)
     * Required request body without ID or status, default computed status is NOT_STARTED. 
     * @param createSeason  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all seasons including new seasons created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSeasonsAsync(List<CreateSeason> createSeason, final ApiCallback<List<Season>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSeasonsValidateBeforeCall(createSeason, _callback);
        Type localVarReturnType = new TypeToken<List<Season>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSeasons
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of seasons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeasonsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeasonsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSeasonsCall(_callback);

    }

    /**
     * Get list of existing seasons
     * 
     * @return Season
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of seasons </td><td>  -  </td></tr>
     </table>
     */
    public Season getSeasons() throws ApiException {
        ApiResponse<Season> localVarResp = getSeasonsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get list of existing seasons
     * 
     * @return ApiResponse&lt;Season&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of seasons </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Season> getSeasonsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSeasonsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Season>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of existing seasons (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of seasons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSeasonsAsync(final ApiCallback<Season> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSeasonsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Season>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSeasonStatus
     * @param seasonYear  (required)
     * @param updateSeasonStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Season with updated status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSeasonStatusCall(LocalDate seasonYear, UpdateSeasonStatus updateSeasonStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSeasonStatus;

        // create path and map variables
        String localVarPath = "/seasons/{seasonYear}/status"
            .replace("{" + "seasonYear" + "}", localVarApiClient.escapeString(seasonYear.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSeasonStatusValidateBeforeCall(LocalDate seasonYear, UpdateSeasonStatus updateSeasonStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling updateSeasonStatus(Async)");
        }

        return updateSeasonStatusCall(seasonYear, updateSeasonStatus, _callback);

    }

    /**
     * Update a specific season status
     * Following order can be accepted : NOT_STARTED &gt; STARTED &gt; FINISHED. In case you change status update order, a 400 BAD_REQUEST response must be return. 
     * @param seasonYear  (required)
     * @param updateSeasonStatus  (optional)
     * @return Season
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Season with updated status </td><td>  -  </td></tr>
     </table>
     */
    public Season updateSeasonStatus(LocalDate seasonYear, UpdateSeasonStatus updateSeasonStatus) throws ApiException {
        ApiResponse<Season> localVarResp = updateSeasonStatusWithHttpInfo(seasonYear, updateSeasonStatus);
        return localVarResp.getData();
    }

    /**
     * Update a specific season status
     * Following order can be accepted : NOT_STARTED &gt; STARTED &gt; FINISHED. In case you change status update order, a 400 BAD_REQUEST response must be return. 
     * @param seasonYear  (required)
     * @param updateSeasonStatus  (optional)
     * @return ApiResponse&lt;Season&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Season with updated status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Season> updateSeasonStatusWithHttpInfo(LocalDate seasonYear, UpdateSeasonStatus updateSeasonStatus) throws ApiException {
        okhttp3.Call localVarCall = updateSeasonStatusValidateBeforeCall(seasonYear, updateSeasonStatus, null);
        Type localVarReturnType = new TypeToken<Season>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a specific season status (asynchronously)
     * Following order can be accepted : NOT_STARTED &gt; STARTED &gt; FINISHED. In case you change status update order, a 400 BAD_REQUEST response must be return. 
     * @param seasonYear  (required)
     * @param updateSeasonStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Season with updated status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSeasonStatusAsync(LocalDate seasonYear, UpdateSeasonStatus updateSeasonStatus, final ApiCallback<Season> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSeasonStatusValidateBeforeCall(seasonYear, updateSeasonStatus, _callback);
        Type localVarReturnType = new TypeToken<Season>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
