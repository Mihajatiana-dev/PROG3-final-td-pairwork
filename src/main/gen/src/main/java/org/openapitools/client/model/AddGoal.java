/*
 * Football championship API
 * Football
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddGoal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-29T01:12:43.252300458+03:00[Indian/Antananarivo]", comments = "Generator version: 7.7.0")
public class AddGoal {
  public static final String SERIALIZED_NAME_CLUB_ID = "clubId";
  @SerializedName(SERIALIZED_NAME_CLUB_ID)
  private String clubId;

  public static final String SERIALIZED_NAME_SCORER_IDENTIFIER = "scorerIdentifier";
  @SerializedName(SERIALIZED_NAME_SCORER_IDENTIFIER)
  private String scorerIdentifier;

  public static final String SERIALIZED_NAME_MINUTE_OF_GOAL = "minuteOfGoal";
  @SerializedName(SERIALIZED_NAME_MINUTE_OF_GOAL)
  private Integer minuteOfGoal;

  public AddGoal() {
  }

  public AddGoal clubId(String clubId) {
    this.clubId = clubId;
    return this;
  }

  /**
   * Club identifier that the goal will be given. In case the given clubId is not one of the clubs playing, return 400 BAD REQUEST. For example, RMA club.id &#x3D; 1, FCB club.id&#x3D;2 and ATM club.id&#x3D;3, and it&#39;s a match against RMA vs FCB, but the provided &#x60;clubId&#x60; is 3, so it returns 400 BAD REQUEST. 
   * @return clubId
   */
  @javax.annotation.Nullable
  public String getClubId() {
    return clubId;
  }

  public void setClubId(String clubId) {
    this.clubId = clubId;
  }


  public AddGoal scorerIdentifier(String scorerIdentifier) {
    this.scorerIdentifier = scorerIdentifier;
    return this;
  }

  /**
   * Player identifier that can be a player of the opponent club, not only the club that has the player.  In case a player for the opponent club has scored,  it is called a \&quot;own goal\&quot; and so &#x60;ownGoal&#x60; attribute to be returned is to true, otherwise false. 
   * @return scorerIdentifier
   */
  @javax.annotation.Nullable
  public String getScorerIdentifier() {
    return scorerIdentifier;
  }

  public void setScorerIdentifier(String scorerIdentifier) {
    this.scorerIdentifier = scorerIdentifier;
  }


  public AddGoal minuteOfGoal(Integer minuteOfGoal) {
    this.minuteOfGoal = minuteOfGoal;
    return this;
  }

  /**
   * Must be between 1 to 90 only, a 400 BAD REQUEST must be given if not.
   * @return minuteOfGoal
   */
  @javax.annotation.Nullable
  public Integer getMinuteOfGoal() {
    return minuteOfGoal;
  }

  public void setMinuteOfGoal(Integer minuteOfGoal) {
    this.minuteOfGoal = minuteOfGoal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddGoal addGoal = (AddGoal) o;
    return Objects.equals(this.clubId, addGoal.clubId) &&
        Objects.equals(this.scorerIdentifier, addGoal.scorerIdentifier) &&
        Objects.equals(this.minuteOfGoal, addGoal.minuteOfGoal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clubId, scorerIdentifier, minuteOfGoal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddGoal {\n");
    sb.append("    clubId: ").append(toIndentedString(clubId)).append("\n");
    sb.append("    scorerIdentifier: ").append(toIndentedString(scorerIdentifier)).append("\n");
    sb.append("    minuteOfGoal: ").append(toIndentedString(minuteOfGoal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clubId");
    openapiFields.add("scorerIdentifier");
    openapiFields.add("minuteOfGoal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddGoal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddGoal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddGoal is not found in the empty JSON string", AddGoal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddGoal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddGoal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clubId") != null && !jsonObj.get("clubId").isJsonNull()) && !jsonObj.get("clubId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clubId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clubId").toString()));
      }
      if ((jsonObj.get("scorerIdentifier") != null && !jsonObj.get("scorerIdentifier").isJsonNull()) && !jsonObj.get("scorerIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scorerIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scorerIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddGoal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddGoal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddGoal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddGoal.class));

       return (TypeAdapter<T>) new TypeAdapter<AddGoal>() {
           @Override
           public void write(JsonWriter out, AddGoal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddGoal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddGoal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddGoal
   * @throws IOException if the JSON string is invalid with respect to AddGoal
   */
  public static AddGoal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddGoal.class);
  }

  /**
   * Convert an instance of AddGoal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

