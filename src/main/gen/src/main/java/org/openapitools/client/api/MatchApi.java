/*
 * Football championship API
 * Football
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddGoal;
import java.time.LocalDate;
import org.openapitools.client.model.Match;
import org.openapitools.client.model.MatchStatus;
import org.openapitools.client.model.UpdateMatchStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MatchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MatchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MatchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for matchMakerSeasonYearPost
     * @param seasonYear  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created matches for the season </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchMakerSeasonYearPostCall(LocalDate seasonYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/matchMaker/{seasonYear}"
            .replace("{" + "seasonYear" + "}", localVarApiClient.escapeString(seasonYear.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call matchMakerSeasonYearPostValidateBeforeCall(LocalDate seasonYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling matchMakerSeasonYearPost(Async)");
        }

        return matchMakerSeasonYearPostCall(seasonYear, _callback);

    }

    /**
     * Create all matches for a specific season including all clubs
     * Only season with status STARTED can compute matches, in case season status is either NOT_STARTED or FINISHED, must return 400 BAD_REQUEST. In case provided season matches already generated, then must return 400 BAD_REQUEST response. Otherwise, create two matches for each club against other, one &#39;HOME&#39; match and one &#39;AWAY&#39; match. Look at the instructions inside the context to have more explanation and examples. Also, in case the provided &#x60;seasonYear&#x60; does not exist, returns 404 NOT_FOUND response. 
     * @param seasonYear  (required)
     * @return List&lt;Match&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created matches for the season </td><td>  -  </td></tr>
     </table>
     */
    public List<Match> matchMakerSeasonYearPost(LocalDate seasonYear) throws ApiException {
        ApiResponse<List<Match>> localVarResp = matchMakerSeasonYearPostWithHttpInfo(seasonYear);
        return localVarResp.getData();
    }

    /**
     * Create all matches for a specific season including all clubs
     * Only season with status STARTED can compute matches, in case season status is either NOT_STARTED or FINISHED, must return 400 BAD_REQUEST. In case provided season matches already generated, then must return 400 BAD_REQUEST response. Otherwise, create two matches for each club against other, one &#39;HOME&#39; match and one &#39;AWAY&#39; match. Look at the instructions inside the context to have more explanation and examples. Also, in case the provided &#x60;seasonYear&#x60; does not exist, returns 404 NOT_FOUND response. 
     * @param seasonYear  (required)
     * @return ApiResponse&lt;List&lt;Match&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created matches for the season </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Match>> matchMakerSeasonYearPostWithHttpInfo(LocalDate seasonYear) throws ApiException {
        okhttp3.Call localVarCall = matchMakerSeasonYearPostValidateBeforeCall(seasonYear, null);
        Type localVarReturnType = new TypeToken<List<Match>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create all matches for a specific season including all clubs (asynchronously)
     * Only season with status STARTED can compute matches, in case season status is either NOT_STARTED or FINISHED, must return 400 BAD_REQUEST. In case provided season matches already generated, then must return 400 BAD_REQUEST response. Otherwise, create two matches for each club against other, one &#39;HOME&#39; match and one &#39;AWAY&#39; match. Look at the instructions inside the context to have more explanation and examples. Also, in case the provided &#x60;seasonYear&#x60; does not exist, returns 404 NOT_FOUND response. 
     * @param seasonYear  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of created matches for the season </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchMakerSeasonYearPostAsync(LocalDate seasonYear, final ApiCallback<List<Match>> _callback) throws ApiException {

        okhttp3.Call localVarCall = matchMakerSeasonYearPostValidateBeforeCall(seasonYear, _callback);
        Type localVarReturnType = new TypeToken<List<Match>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for matchesIdGoalsPost
     * @param id  (required)
     * @param addGoal  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match with updated goals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesIdGoalsPostCall(String id, List<AddGoal> addGoal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addGoal;

        // create path and map variables
        String localVarPath = "/matches/{id}/goals"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call matchesIdGoalsPostValidateBeforeCall(String id, List<AddGoal> addGoal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling matchesIdGoalsPost(Async)");
        }

        return matchesIdGoalsPostCall(id, addGoal, _callback);

    }

    /**
     * Add goals by player to a specific match
     * Only match with status STARTED can be added goals. If NOT_STARTED or FINISHED status, must return 400 BAD_REQUEST. After each request, the scorer player statistics must be updated, that means, after a goal is scored, response return by GET /players/{id}/statistics/{seasonYear} should be updated. 
     * @param id  (required)
     * @param addGoal  (optional)
     * @return Match
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match with updated goals </td><td>  -  </td></tr>
     </table>
     */
    public Match matchesIdGoalsPost(String id, List<AddGoal> addGoal) throws ApiException {
        ApiResponse<Match> localVarResp = matchesIdGoalsPostWithHttpInfo(id, addGoal);
        return localVarResp.getData();
    }

    /**
     * Add goals by player to a specific match
     * Only match with status STARTED can be added goals. If NOT_STARTED or FINISHED status, must return 400 BAD_REQUEST. After each request, the scorer player statistics must be updated, that means, after a goal is scored, response return by GET /players/{id}/statistics/{seasonYear} should be updated. 
     * @param id  (required)
     * @param addGoal  (optional)
     * @return ApiResponse&lt;Match&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match with updated goals </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Match> matchesIdGoalsPostWithHttpInfo(String id, List<AddGoal> addGoal) throws ApiException {
        okhttp3.Call localVarCall = matchesIdGoalsPostValidateBeforeCall(id, addGoal, null);
        Type localVarReturnType = new TypeToken<Match>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add goals by player to a specific match (asynchronously)
     * Only match with status STARTED can be added goals. If NOT_STARTED or FINISHED status, must return 400 BAD_REQUEST. After each request, the scorer player statistics must be updated, that means, after a goal is scored, response return by GET /players/{id}/statistics/{seasonYear} should be updated. 
     * @param id  (required)
     * @param addGoal  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match with updated goals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesIdGoalsPostAsync(String id, List<AddGoal> addGoal, final ApiCallback<Match> _callback) throws ApiException {

        okhttp3.Call localVarCall = matchesIdGoalsPostValidateBeforeCall(id, addGoal, _callback);
        Type localVarReturnType = new TypeToken<Match>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for matchesIdStatusPut
     * @param id  (required)
     * @param updateMatchStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match with updated status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesIdStatusPutCall(String id, UpdateMatchStatus updateMatchStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMatchStatus;

        // create path and map variables
        String localVarPath = "/matches/{id}/status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call matchesIdStatusPutValidateBeforeCall(String id, UpdateMatchStatus updateMatchStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling matchesIdStatusPut(Async)");
        }

        return matchesIdStatusPutCall(id, updateMatchStatus, _callback);

    }

    /**
     * Change a specific match status
     * Following order is to be accepted : NOT_STARTED &gt; STARTED &gt; FINISHED. In case you change status order, a 400 BAD_REQUEST response must be return. When match is set to status FINISHED, club rankings and statistics must be updated,  that means after a match is finished, response return by GET /clubs/statistics/{seasonYear} should be updated. For reminder, this is the rules about points obtained after each match according to its result :  1. In case of victory, the winner obtains 3 points. 2. In cas of draw, each club of the match obtains 1 point. 3. In case of defeat, the loser obtains 0 point. 
     * @param id  (required)
     * @param updateMatchStatus  (optional)
     * @return Match
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match with updated status </td><td>  -  </td></tr>
     </table>
     */
    public Match matchesIdStatusPut(String id, UpdateMatchStatus updateMatchStatus) throws ApiException {
        ApiResponse<Match> localVarResp = matchesIdStatusPutWithHttpInfo(id, updateMatchStatus);
        return localVarResp.getData();
    }

    /**
     * Change a specific match status
     * Following order is to be accepted : NOT_STARTED &gt; STARTED &gt; FINISHED. In case you change status order, a 400 BAD_REQUEST response must be return. When match is set to status FINISHED, club rankings and statistics must be updated,  that means after a match is finished, response return by GET /clubs/statistics/{seasonYear} should be updated. For reminder, this is the rules about points obtained after each match according to its result :  1. In case of victory, the winner obtains 3 points. 2. In cas of draw, each club of the match obtains 1 point. 3. In case of defeat, the loser obtains 0 point. 
     * @param id  (required)
     * @param updateMatchStatus  (optional)
     * @return ApiResponse&lt;Match&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match with updated status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Match> matchesIdStatusPutWithHttpInfo(String id, UpdateMatchStatus updateMatchStatus) throws ApiException {
        okhttp3.Call localVarCall = matchesIdStatusPutValidateBeforeCall(id, updateMatchStatus, null);
        Type localVarReturnType = new TypeToken<Match>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change a specific match status (asynchronously)
     * Following order is to be accepted : NOT_STARTED &gt; STARTED &gt; FINISHED. In case you change status order, a 400 BAD_REQUEST response must be return. When match is set to status FINISHED, club rankings and statistics must be updated,  that means after a match is finished, response return by GET /clubs/statistics/{seasonYear} should be updated. For reminder, this is the rules about points obtained after each match according to its result :  1. In case of victory, the winner obtains 3 points. 2. In cas of draw, each club of the match obtains 1 point. 3. In case of defeat, the loser obtains 0 point. 
     * @param id  (required)
     * @param updateMatchStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Match with updated status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesIdStatusPutAsync(String id, UpdateMatchStatus updateMatchStatus, final ApiCallback<Match> _callback) throws ApiException {

        okhttp3.Call localVarCall = matchesIdStatusPutValidateBeforeCall(id, updateMatchStatus, _callback);
        Type localVarReturnType = new TypeToken<Match>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for matchesSeasonYearGet
     * @param seasonYear  (required)
     * @param matchStatus Return list filtered by provided matchStatus value.  For example, if provided matchStatus &#x3D; FINISHED, then only FINISHED matches will be returned.  (optional)
     * @param clubPlayingName Return list filtered by provided clubPlayingName value containing. For example, if provided clubPlayingName &#x3D; &#39;Real&#39;, then return all matches that contains &#39;Real&#39; as clubs playing name,  both if the clubs play HOME or AWAY.  (optional)
     * @param matchAfter Return matches after the provided date only. In case both &#x60;matchAfter&#x60; and &#x60;matchBeforeOrEquals&#x60; parameters are provided,  Return list of matches between date intervals.  (optional)
     * @param matchBeforeOrEquals Return matches before or equals the provided date only. In case both &#x60;matchAfter&#x60; and &#x60;matchBeforeOrEquals&#x60; parameters are provided,  Return list of matches between date intervals.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matches of the specific season </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesSeasonYearGetCall(LocalDate seasonYear, MatchStatus matchStatus, String clubPlayingName, LocalDate matchAfter, LocalDate matchBeforeOrEquals, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/matches/{seasonYear}"
            .replace("{" + "seasonYear" + "}", localVarApiClient.escapeString(seasonYear.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (matchStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchStatus", matchStatus));
        }

        if (clubPlayingName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clubPlayingName", clubPlayingName));
        }

        if (matchAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchAfter", matchAfter));
        }

        if (matchBeforeOrEquals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchBeforeOrEquals", matchBeforeOrEquals));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call matchesSeasonYearGetValidateBeforeCall(LocalDate seasonYear, MatchStatus matchStatus, String clubPlayingName, LocalDate matchAfter, LocalDate matchBeforeOrEquals, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seasonYear' is set
        if (seasonYear == null) {
            throw new ApiException("Missing the required parameter 'seasonYear' when calling matchesSeasonYearGet(Async)");
        }

        return matchesSeasonYearGetCall(seasonYear, matchStatus, clubPlayingName, matchAfter, matchBeforeOrEquals, _callback);

    }

    /**
     * Get all matches for a specific season
     * 
     * @param seasonYear  (required)
     * @param matchStatus Return list filtered by provided matchStatus value.  For example, if provided matchStatus &#x3D; FINISHED, then only FINISHED matches will be returned.  (optional)
     * @param clubPlayingName Return list filtered by provided clubPlayingName value containing. For example, if provided clubPlayingName &#x3D; &#39;Real&#39;, then return all matches that contains &#39;Real&#39; as clubs playing name,  both if the clubs play HOME or AWAY.  (optional)
     * @param matchAfter Return matches after the provided date only. In case both &#x60;matchAfter&#x60; and &#x60;matchBeforeOrEquals&#x60; parameters are provided,  Return list of matches between date intervals.  (optional)
     * @param matchBeforeOrEquals Return matches before or equals the provided date only. In case both &#x60;matchAfter&#x60; and &#x60;matchBeforeOrEquals&#x60; parameters are provided,  Return list of matches between date intervals.  (optional)
     * @return List&lt;Match&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matches of the specific season </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Match> matchesSeasonYearGet(LocalDate seasonYear, MatchStatus matchStatus, String clubPlayingName, LocalDate matchAfter, LocalDate matchBeforeOrEquals) throws ApiException {
        ApiResponse<List<Match>> localVarResp = matchesSeasonYearGetWithHttpInfo(seasonYear, matchStatus, clubPlayingName, matchAfter, matchBeforeOrEquals);
        return localVarResp.getData();
    }

    /**
     * Get all matches for a specific season
     * 
     * @param seasonYear  (required)
     * @param matchStatus Return list filtered by provided matchStatus value.  For example, if provided matchStatus &#x3D; FINISHED, then only FINISHED matches will be returned.  (optional)
     * @param clubPlayingName Return list filtered by provided clubPlayingName value containing. For example, if provided clubPlayingName &#x3D; &#39;Real&#39;, then return all matches that contains &#39;Real&#39; as clubs playing name,  both if the clubs play HOME or AWAY.  (optional)
     * @param matchAfter Return matches after the provided date only. In case both &#x60;matchAfter&#x60; and &#x60;matchBeforeOrEquals&#x60; parameters are provided,  Return list of matches between date intervals.  (optional)
     * @param matchBeforeOrEquals Return matches before or equals the provided date only. In case both &#x60;matchAfter&#x60; and &#x60;matchBeforeOrEquals&#x60; parameters are provided,  Return list of matches between date intervals.  (optional)
     * @return ApiResponse&lt;List&lt;Match&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matches of the specific season </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Match>> matchesSeasonYearGetWithHttpInfo(LocalDate seasonYear, MatchStatus matchStatus, String clubPlayingName, LocalDate matchAfter, LocalDate matchBeforeOrEquals) throws ApiException {
        okhttp3.Call localVarCall = matchesSeasonYearGetValidateBeforeCall(seasonYear, matchStatus, clubPlayingName, matchAfter, matchBeforeOrEquals, null);
        Type localVarReturnType = new TypeToken<List<Match>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all matches for a specific season (asynchronously)
     * 
     * @param seasonYear  (required)
     * @param matchStatus Return list filtered by provided matchStatus value.  For example, if provided matchStatus &#x3D; FINISHED, then only FINISHED matches will be returned.  (optional)
     * @param clubPlayingName Return list filtered by provided clubPlayingName value containing. For example, if provided clubPlayingName &#x3D; &#39;Real&#39;, then return all matches that contains &#39;Real&#39; as clubs playing name,  both if the clubs play HOME or AWAY.  (optional)
     * @param matchAfter Return matches after the provided date only. In case both &#x60;matchAfter&#x60; and &#x60;matchBeforeOrEquals&#x60; parameters are provided,  Return list of matches between date intervals.  (optional)
     * @param matchBeforeOrEquals Return matches before or equals the provided date only. In case both &#x60;matchAfter&#x60; and &#x60;matchBeforeOrEquals&#x60; parameters are provided,  Return list of matches between date intervals.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of matches of the specific season </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesSeasonYearGetAsync(LocalDate seasonYear, MatchStatus matchStatus, String clubPlayingName, LocalDate matchAfter, LocalDate matchBeforeOrEquals, final ApiCallback<List<Match>> _callback) throws ApiException {

        okhttp3.Call localVarCall = matchesSeasonYearGetValidateBeforeCall(seasonYear, matchStatus, clubPlayingName, matchAfter, matchBeforeOrEquals, _callback);
        Type localVarReturnType = new TypeToken<List<Match>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
